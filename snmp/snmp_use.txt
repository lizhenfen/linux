源码安装：netsnmp


方法：get value:
	oid = netsnmp.Varbind('1.3.6.1.4.1','2544.1.12.2.1.10.1.0')
	oidList = netsnmp.VarList(oid)
	resultList = netsnmp.snmpget(oid ,Version=2,DestHost='192.168.200.22',Community='public')
类实现：
	session = netsnmp.Session(Version=2,DestHost='172.23.192.44',Community='private')
	oid = netsnmp.Varbind('1.3.6.1.4.1','2544.1.12.2.1.10.1.0',2,'INTEGER')
	oidList = netsnmp.VarList(oid)
	resultList = session.get(oidList)
多个get：
	print "Get ntpClientEnabled"
	oid = netsnmp.Varbind('1.3.6.1.4.1','2544.1.12.2.1.10.1.0')
	oid1 =  netsnmp.Varbind('1.3.6.1.4.1.2544.1.12.8.1.1.1.5','1.1.1.1','15','INTEGER')
	resultList = netsnmp.snmpget(oid ,oid1,Version=2,DestHost='172.23.192.44',Community='private')
类的方法进行Get：
	session = netsnmp.Session(Version=2,DestHost='172.23.192.44',Community='private')
	oid2 = netsnmp.Varbind('1.3.6.1.4.1','2544.1.12.2.1.10.1.0',2,'INTEGER')
	oid3 = netsnmp.Varbind('.1.3.6.1.4.1.2544.1.12.8.1.1.1.5','1.1.1.1',20,'INTEGER')
	oidList = netsnmp.VarList(oid3,oid2)
	resultList = session.get(oidList)
	
	
获取单个值： snmpwalk -v 2c -c public ip mid 
参考： http://blog.163.com/harry.hh@126/blog/static/462548682011810334346/
应用：
	1. 获取目标地址的ipAdEntIfIndex(.1.3.6.1.2.1.4.20.1.2 )  #管理vlan地址
		[root@localhost ~]# snmpwalk -v 2c -c public 192.168.200.22 .1.3.6.1.2.1.4.20.1.2
		IP-MIB::ipAdEntIfIndex.192.168.27.252 = INTEGER: 27    #192.168.27网段的 是 27
		IP-MIB::ipAdEntIfIndex.192.168.200.22 = INTEGER: 200   #192.168.200 网段的是 200
	2.  根据ipAdEntIfIndex查询目标IP所属的ifName即VLan ID
		[root@localhost ~]# snmpwalk -v 2c -c public 192.168.200.22 1.3.6.1.2.1.31.1.1.1.1.27
												 27: 27为ipAdEntIfIndex
		IF-MIB::ifName.27 = STRING: Vl27   # vlan 27 
	3. 根据ipAdEntIfIndex和目的IP地址查询获得目的IP地址的MAC
		[root@localhost ~]# snmpwalk -v 2c -c public 192.168.200.22 .1.3.6.1.2.1.3.1.1.2.27.1.192.168.27.253
												 27.1.: 27为ipAdEntIfIndex
												 192.168.27.253： 目的ip
																						 27:ipAdEntIfIndex 192.168.27.253:des ip 
		SNMPv2-SMI::mib-2.3.1.1.2.27.1.192.168.27.253 = Hex-STRING: B0 83 FE AF 76 51 


  2、根据MAC地址获得三层交换机的物理端口号
	1. 根据MAC查询dot1dTpFdbPort                              .1.3.6.1.2.1.17.4.3.1.2.176.131.254.175.118.81
		snmpwalk -v 2c -c public@27 192.168.200.22 .1.3.6.1.2.1.17.4.3.1.2
		                        @: 接vlan id                              2：后面为目标IP的MAC地址各段转换为十进制的值
		若上面查询出的值大于1000,修改查询snmp-server地址
		结果： SNMPv2-SMI::mib-2.17.4.3.1.2.0.25.33.67.233.135 = INTEGER: 49

	        In [283]: sn_var = netsnmp.Varbind('.1.3.6.1.2.1.17.4.3.1.2.176.131.254.175.118.81')
	        In [284]: netsnmp.snmpget(sn_var,Version=2,DestHost='192.168.200.22',Community='public@27')


	2. 根据dot1dTpFdbPort的值查询dot1dBasePortIfIndex的值
		snmpwalk -v 2c -c public@27 192.168.200.22  1.3.6.1.2.1.17.1.4.1.2.49 
																		   49为上面查询出的结果
		[root@localhost ~]# snmpwalk -v 2c -c public@27 192.168.200.22  1.3.6.1.2.1.17.1.4.1.2.49
		SNMPv2-SMI::mib-2.17.1.4.1.2.49 = INTEGER: 10101
	3.  根据dot1dBasePortIfIndex查询ifName的值
		snmpwalk -v 2c -c public@27 192.168.200.22 1.3.6.1.2.1.31.1.1.1.1.10101
																		  10101：dot1dBasePortIfIndex
		[root@localhost ~]# snmpwalk -v 2c -c public@27 192.168.200.22 1.3.6.1.2.1.31.1.1.1.1.10101
		IF-MIB::ifName.10101 = STRING: Gi0/1


  3、根据三层交换机的接口信息查询与之互连的二层交换机的IP
	1. 根据dot1dBasePortIfIndex查询cdpCacheAddress的值
		snmpwalk -v 2c -c public 192.168.200.22 1.3.6.1.4.1.9.9.23.1.2.1.1.4.10101 
																			 10101 : dot1dBasePortIfIndex
		[root@localhost ~]# snmpwalk -v 2c -c public 192.168.200.22 1.3.6.1.4.1.9.9.23.1.2.1.1.4.10101
		SNMPv2-SMI::enterprises.9.9.23.1.2.1.1.4.10101.1 = Hex-STRING: C0 A8 C8 4B   #转换成10进制,即为二层管理IP
	2. 根据目的IP的MAC地址查询对应的二层交换机物理接口号
		snmpwalk -v 2c -c public@27 192.168.200.22 .1.3.6.1.2.1.17.4.3.1.2.
										  10进制的mac地址								 2： 后面接目标IP的mac
		snmpwalk -v 2c -c public@27 192.168.200.22 .1.3.6.1.2.1.17.1.4.1.2.
																		 2： 后面接 上调查询结果
		snmpwalk -v 2c -c public@27 192.168.200.22 .1.3.6.1.2.1.31.1.1.1.1.
																		 1： 后面接 上调查询结果
		[root@localhost ~]# snmpwalk -v 2c -c public@27 192.168.200.22 .1.3.6.1.2.1.17.4.3.1.2.0.16.131.187.240.21
		SNMPv2-SMI::mib-2.17.4.3.1.2.0.16.131.187.240.21 = INTEGER: 49
		[root@localhost ~]# snmpwalk -v 2c -c public@27 192.168.200.22 .1.3.6.1.2.1.17.1.4.1.2.49
		SNMPv2-SMI::mib-2.17.1.4.1.2.49 = INTEGER: 10101
		[root@localhost ~]# snmpwalk -v 2c -c public@27 192.168.200.22 .1.3.6.1.2.1.31.1.1.1.1.10101
		IF-MIB::ifName.10101 = STRING: Gi0/1



	输入：
		mac_list =('\xf8\xbc\x12Y\x86W',
		 '\x00\x1fm\xc0\xc9\xc1',
		 '\xb0\x83\xfe\xafvQ',
		 '\x00\x1fm\xc0\xc9\xc4',
		 '\x00!Ul\xb7\x00')
	输出：
		['f8:bc:12:59:86:57',
		 '0:1f:6d:c0:c9:c1',
		 'b0:83:fe:af:76:51',
		 '0:1f:6d:c0:c9:c4',
		 '0:21:55:6c:b7:0']
   10进制输出：
		248.188.18.89.134.87
		0.31.109.192.201.193
		176.131.254.175.118.81
		0.31.109.192.201.196
		0.33.85.108.183.0

获取mac地址
	sn_var = netsnmp.Varbind('ipNetToMediaPhysAddress')
	netsnmp.snmpwalk(sn_list,Version=2,DestHost='192.168.200.22',Community='public')
	
	#解析返回的数据成mac地址
	def mac_parser(mac_list):
	  def mac(hmac):
	    return ":".join([ hex(ord(hm))[2:] for hm in hmac ])
	  return map(mac,mac_list)  #返回列表
	#转换mac地址成10进制
	def h_to_d(hmac):
		#传入单个mac
		h_num_list = hmac.split(":")
		return '.'.join(map(lambda hmac: str(int(hmac,16)),h_num_list))
	
	
获取端口状态：ifOperStatus
端口流入流量：ifInOctets
端口流出流量：1.3.6.1.2.1.2.2.1.16
获取ip对应的index: ipAdEntIfIndex(所有的) | ipAdEntIfIndex.ip (ip 是指定的管理ip)
获取端口对应的index； 1.3.6.1.2.1.2.2.1.1
获取端口名称       : 1.3.6.1.2.1.2.2.1.2
获取端口的mac      : 1.3.6.1.2.1.2.2.1.6
过去5s CPU的负载： 1.3.6.1.4.1.9.2.1.56.0
过去1m CPU的负载： 1.3.6.1.4.1.9.2.1.57.0
过去5m CPU的负载： 1.3.6.1.4.1.9.2.1.58.0

内存的使用： 1.3.6.1.4.1.9.9.48.1.1.1.5
内存剩余： 1.3.6.1.4.1.9.9.48.1.1.1.6


vlan:
	所有的Vlan信息： .1.3.6.1.4.1.9.9.68.1.2.2
	vlan类型： 1.3.6.1.4.1.9.9.68.1.2.2.1.1  #1静态     动态
	vlan名称： 1.3.6.1.4.1.9.9.68.1.2.2.1.2  #0表示未指定
	vlan状态： 1.3.6.1.4.1.9.9.68.1.2.2.1.3  #1 空闲 2激活 3关闭
获取设备名称：  1.3.6.1.2.1.1.5.0

设备序列号： 1.3.6.1.4.1.9.3.0 或 1.3.6.1.2.1.47.1.1.1.1.11.1

  
  

		